{"version":3,"sources":["src/models/abstract/AbstractModel.js","src/models/Todo.js","src/components/UI.js","src/utils/Errors.js","src/utils/Validation.js","src/utils/Actions.js","src/main.js"],"names":["Model","title","todos","JSON","parse","localStorage","getItem","push","id","Math","floor","random","completed","setItem","stringify","_todo","newTodos","filter","todo","newStore","console","log","store","item","storeState","_title","updateStore","Todo","UI","appHook","document","getElementById","ul","createElement","setAttribute","all","map","showTodo","li","input","btn1","btn2","innerHTML","prepend","appendChild","el","classList","contains","toggleCompleted","value","parentElement","toggle","remove","errorArray","length","alerts","forEach","error","Errors","errors","errMsg","Validation","rules","data","valid","rule","index","callbacks","split","callback","fieldName","Object","keys","lessThan","_name","set","empty","field","trim","HandleBtnClick","btn","addEventListener","_input","name","newTodo","validate","save","renderErrors","get","todoList","querySelector","e","toggleTodo","target","removeTodo","isEmpty","isLessThan","window","showTodos"],"mappings":"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","file":"main.1e43358e.map","sourceRoot":"..","sourcesContent":["\n/**\n * Handles all CRUD tasks\n * Abstracts methods for child models \n * thru inheritance (all models inherit from Model class)\n */\nexport default class Model \n{\n    constructor(title)\n    {\n        this.todos = JSON.parse(localStorage.getItem(\"_todos\"));\n        this.title = title;\n    }\n\n    storeState() \n    {\n        this.todos.push({\n            id: Math.floor(Math.random() * 100),\n            title: this.title,\n            completed: false\n        });\n\n        localStorage.setItem(\"_todos\", JSON.stringify(this.todos));\n    }\n\n    updateStore(_todo)\n    {\n        let newTodos = this.todos.filter(todo => todo.id !== _todo[0].id);\n        let newStore = [...newTodos, _todo[0]];\n        this.todos = newStore;\n        localStorage.setItem(\"_todos\", JSON.stringify(newStore));\n    }\n\n    // returns all todos\n    all() \n    {\n        return this.todos;\n    }\n\n    get(id)\n    {\n        if(id===null) \n        {\n\t\t\treturn console.log(\"function expects exactly 1 arg. 0 passed\");\n        }\n        \n        return this.store.filter(item => item.id === id );\n    }\n\n    /**\n     * invokes setStore method which engages \n     * persistence storage \n     */\n    save()\n    {\n        this.storeState();\n    }\n\n    editTitle(id, _title) \n    {\n        let todo = this.store.filter(item => item.id === id );\n        \n        todo.title = _title;\n        this.updateStore(todo);\n    }\n\n    toggleCompleted(id)\n    {\n        let todo = this.todos.filter(item => item.id == id );\n        todo[0].completed = !todo[0].completed;\n        this.updateStore(todo);\n    }\n\n    delete(id) \n    {\n        this.store = this.store.filter(todo => todo.id !== id );\n        return true;\n    }\n}\n","import Model  from './abstract/AbstractModel';\n\n/**\n * Extends model abstract\n * initializes instance properties\n */\nexport default class Todo extends Model \n{\n\tconstructor(title = null) \n\t{\n\t\tsuper(title);\n\t}\n}\n","import Todo from '../models/Todo';\n\n/**\n * Class responsible for creating dynamic DOM elements:\n * todo list, alerts etc\n * ref: https://davidwalsh.name/documentfragment\n */\nexport default class UI \n{\n\tconstructor(todos)\n\t{\n\t\t// init todos\n\t\tUI.todos = new Todo();\n\n\t\t// get div with id 'app' from index.html\n\t\tUI.appHook = document.getElementById(\"app\");\n\t\tUI.ul = document.createElement(\"ul\");\n\t\tUI.ul.setAttribute(\"id\", \"list-items\");\n\t}\n\n    static showTodos() \n    {\n\t\t// get todos\n\t\tconst todos = UI.todos.all();\n\n\t\t// iterate through each todo and \n\t\t//delegate DOM manipulation to showTodo()\n\t\ttodos.map(todo => UI.showTodo(todo));\n\t}\n\n\t/**\n\t * method responsible for creating new DOM nodes and \n\t * assigning todo values to list nodes.\n\t * @param {*} todo \n\t */\n    static showTodo(todo) \n    {\n\t\t// create a UL & LI elements\n\t\tconst li = document.createElement(\"li\");\n\t\tconst input = document.createElement(\"input\"); \n\t\tconst btn1 = document.createElement(\"button\"); \n\t\tconst btn2 = document.createElement(\"button\"); \n\n\t\t// set attributes to elements\n\t\tinput.setAttribute('type', 'checkbox'); \n\t\tinput.setAttribute('class', 'checkbox');\n\t\tinput.setAttribute('value', todo.id);\n\t\t\n\n\t\tbtn1.setAttribute('id', todo.id); \n\t\tbtn1.setAttribute('class', 'edit');\n\t\tbtn1.innerHTML = \"Edit\";\n\n\t\tbtn2.setAttribute('id', todo.id); \n\t\tbtn2.setAttribute('class', 'delete');\n\t\tbtn2.innerHTML = \"Delete\";\n\t\t\n\t\t// append children to li tag\n\t\tli.innerHTML = todo.title;\n\t\tli.prepend(input);\n\t\tli.appendChild(btn1);\n\t\tli.appendChild(btn2);\n\n\t\t// then append the li to ul tag\n\t\tUI.ul.appendChild(li);\n\n\t\t// finally append the ul tag to the appHook\n\t\tUI.appHook.appendChild(UI.ul);\n\t}\n\n\tstatic toggleTodo(el)\n\t{\n\t\tif(el.classList.contains('checkbox'))\n\t\t{\n\t\t\t// update completed property\n\t\t\tUI.todos.toggleCompleted(el.value,);\n\t\t\t// update the UI\n\t\t\tel.parentElement.classList.toggle(\"true\");\n\t\t}\n\t}\n\n\tstatic editTodo(el) \n\t{\n\t\tif(el.classList.contains('edit'))\n\t\t{\n\t\t\t// edit todo\n\t\t}\n\t}\n\n\tstatic removeTodo(el) \n\t{\n\t\tif(el.classList.contains('delete'))\n\t\t{\n\t\t\tel.parentElement.remove();\n\t\t}\n\t}\n\n\n\t/**\n\t * displays errors when called\n\t * @param {*} errorArray \n\t */\n\tstatic renderErrors(errorArray=[])\n\t{\n\t\t// ensure errorsAray is set\n\t\tif(errorArray.length === 0) \n\t\t{\n\t\t\t// stop script if array is empty. log message\n\t\t\treturn console.log('expect error array not to be empty');\n\t\t}\n\n\t\t// hook to alerts section in index.html\n\t\tconst alerts = document.getElementById('display-alerts');\n\t\t\n\t\t// create a ul tag\n\t\tlet ul = document.createElement(\"ul\");\n\n\t\t// loop thru errors\n\t\terrorArray.forEach(error => {\n\t\t\t// create li element each time\n\t\t\tlet li = document.createElement(\"li\");\n\n\t\t\t// add error text to li element\n\t\t\tli.innerHTML = error;\n\n\t\t\t// append it immediately to the ul tag\n\t\t\tul.appendChild(li);\n\t\t});\n\n\t\t// append the ul tag to allerts div\n\t\talerts.appendChild(ul);\n\t}\n}\n","/**\n * Error handling class\n * contains errors class property\n * and get & set class methods\n */\n\nexport default class Errors \n{\n    constructor()\n    {\n        // initialize errors property to empty array\n        Errors.errors = [];\n    } \n\n    // returns errors array\n    static get()\n    {\n        return Errors.errors;\n    }\n\n    // sets values to errors property\n    static set(errMsg=null)\n    {\n        Errors.errors.push(errMsg);\n    }\n}","import Errors from './Errors';\n\n/**\n * NOTE: class subject to extention as theres \n * a lot of methods that could potentially be added\n * eg: email, password etc\n */\n\n /**\n  * Validation class validates any form input.\n  * call validate class method and pass it rules & \n  * form data. Any errors are routed to Errors class within\n  * its methods.\n  */\nexport default class Validation \n{\n    /**\n     * cycles through inputs array and returns TRUE/FALSE\n     * depending on whether there are errors or not\n     * @param {*} rules \n     * @param {*} data \n     * returns @bool depending on whether form is valid on not\n     */\n    static validate(rules, data) \n    {\n        // set valide to true unless something is wrong within data object\n        let valid = true;\n\n        // loop through rules first\n        rules.forEach((rule, index) => {\n\n            // extract rules into callback array.\n            let callbacks = rule.title.split('|');\n\n            // loop thru rules array\n            callbacks.forEach(callback => {\n\n                /**\n                 * extract input data and set value variable\n                 * extract keys from data object and set field name\n                 * variable\n                 */\n                let value = (data[index]) ? data[index] : null;\n                let fieldName = Object.keys(data[0])[0];\n\n                // dynamically call this class methods and pass value and field name.\n                if(Validation[callback](value, fieldName) === false) \n                { \n                    /**\n                     * if false ie nthere was a problem: no input value \n                     * or value infringes some rule then set form validity to false.\n                     */\n                    valid = false;\n                }\n                \n            });\n        });\n\n        // return whether form was valid or not\n        return valid;\n    }\n\n    /**\n     * Check if input has minimum character length\n     * @param {*} value \n     * @param {*} fieldName \n     * Returns @bool true/false \n     */\n    static min(value=null, fieldName)\n    {\n        // initialize validity\n        let valid = null;\n\n        // check if input is less that a certain minimum\n        if(Validation.lessThan(value._name) === true) \n        {\n            // if so set valid to false: input has less characters ...\n            // than required\n            valid = false;\n\n            // set error message to errors class\n            Errors.set(`${fieldName} must be more than 5 characters.`);\n        }  \n        else \n        {\n            // otherwise input has right number of characters\n            // set valid to true.\n            valid = true;\n        }\n\n        // return validity\n        return valid;\n    }\n\n    /**\n     * Check input for missing value: input MUST contain value\n     * @param {*} value \n     * @param {*} fieldName \n     * returns @bool true/false\n     */\n    static required(value=null, fieldName)\n    {\n        // initialize validity\n        let valid = null;\n\n        // check if input has empty string\n        if(Validation.empty(value._name) ===true) \n        {\n            // if so set validity to false: input is empty\n            valid = false;\n            \n            // set error message to errors class\n            Errors.set(`${fieldName} is reqired`);\n        } \n        else \n        {\n            // otherwise input is valid: set validity to true\n            valid = true;\n        }\n\n        // return valid\n        return valid;\n    }\n\n    /**\n     * check if field value is empty or not\n     * @param {*} field \n     * returns @bool true/false\n     */\n    static empty(field=null)\n    {\n        return (field ===null || field.trim().length===0) ? true : false;\n    }\n\n    /**\n     * checks if field has characters less or equal to 5:\n     * a minimum required for any input field\n     * @param {*} field \n     * returns @bool true/false\n     */\n    static lessThan(field=null)\n    {\n        return (field.length <= 5) ? true : false;\n    }\n\n}","import Todo from '../models/Todo';\nimport UI from '../components/UI';\nimport Validation from './Validation';\nimport Errors from './Errors';\n\n/**\n * handle button click\n * display errors if any\n * collect form input, and delegate validation\n *  delegate todo persistence\n */\nconst HandleBtnClick = () => {\n\n    // query button tag\n    const btn = document.getElementById(\"btn\");\n\n    // add event to button tag\n    btn.addEventListener(\"click\", () => {\n        /** \n         * initialize variables \n         * **/\n\n        // set rules\n        const rules = [{ title: 'required|min' }];\n        // get input element\n        const _input = document.getElementById(\"new-todo\");\n        // obtain input name\n        const _name = _input.name;\n        // obtain input value\n        const newTodo = _input.value;\n\n        /** Initialize errors object **/\n        new Errors();\n\n        // validate input, passing rules and input value.\n        if(Validation.validate(rules, [{ _name: newTodo }])===true)\n        {\n            /**\n             * If Validation passes then...\n             * initialize Todo object and save new Todo\n             * clear input UI\n             */\n            const todo = new Todo(newTodo);\n            todo.save();\n            UI.showTodo(todo);\n            _input.value = \"\";\n        } else {\n            /**\n             * Otherwise render errors on UI\n             */\n            UI.renderErrors(Errors.get());\n        }\n    });\n};\n\nconst toggleCompleted = () => {\n\n    // selectlist item wrapper - ul tag\n    const todoList = document.querySelector('#list-items');\n\n    // add event to it plus its children (propgation)\n    todoList.addEventListener('click', (e) => {\n        // delegate action to UI toggle action -\n        // passing the clicked element\n        UI.toggleTodo(e.target);\n    }, false);\n};\n\nconst removeTodo = () => {\n\n    // selectlist item wrapper\n    const todoList = document.querySelector('#list-items');\n\n    todoList.addEventListener('click', (e) => {\n        UI.removeTodo(e.target);\n    }, false);\n};\n\n/**\n * check if field value is empty or not\n * @param {*} field \n * returns @bool true/false\n */\nconst isEmpty = (field=null) => {\n    return (field ===null || field.trim().length===0) ? true : false;\n};\n\n/**\n * checks if field has characters less or equal to 5:\n * a minimum required for any input field\n * @param {*} field \n * returns @bool true/false\n */\nconst isLessThan = (field=null) => {\n    return (field.length <= 5) ? true : false;\n};\n\nexport { HandleBtnClick, toggleCompleted, removeTodo, isEmpty, isLessThan };","import UI from './components/UI';\nimport { HandleBtnClick, toggleCompleted } from './utils/Actions';\n\n// display todos when DOM loads\nwindow.document.addEventListener(\"DOMContentLoaded\", function() {\n\t// initialize UI\n\tnew UI;\n\t\n\t//display data\n\tUI.showTodos();\n\n\t// handle \"add new todo\" button click\n\tHandleBtnClick();\n\ttoggleCompleted();\n});\n\n\n  "]}