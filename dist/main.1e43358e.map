{"version":3,"sources":["src/models/abstract/data/Store.js","src/lib/Utils.js","src/models/abstract/Model.js","src/models/Todo.js","src/components/UI.js","src/lib/Errors.js","src/lib/Validation.js","src/controllers/Actions.js","src/main.js"],"names":["Store","_data","localStorage","getItem","anyData","getTodos","_id","Math","floor","random","data","JSON","stringify","id","title","completed","setItem","parse","saveData","todos","save","isEmpty","field","trim","length","isLessThan","mergeObjs","objArr","newObj","newArr","filter","obj","Model","push","_todo","newStore","item","storeState","newTitleText","todo","updateStore","store","Todo","UI","appHook","document","getElementById","table","createElement","setAttribute","all","map","showTodo","tr","td","td1","td2","input","span","btn","innerHTML","prepend","appendChild","el","classList","contains","toggleCompleted","value","parentElement","toggle","prompt","editTitle","remove","errorArray","console","log","alerts","ul","forEach","error","li","Errors","errors","errMsg","Validation","rules","valid","rule","index","callbacks","split","callback","fieldName","Object","keys","lessThan","_name","set","empty","todoSubmit","addEventListener","_input","name","newTodo","validate","renderErrors","get","todoList","querySelector","e","toggleTodo","target","editTodo","removeTodo","window","showTodos"],"mappings":"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","file":"main.1e43358e.map","sourceRoot":"..","sourcesContent":["const Store = (function() {\n    \n    const _data = localStorage.getItem(\"_todos\");\n\n    const anyData = (_data) => {\n        return (_data===null) ? false : true;\n    }\n\n    const getTodos = () => {\n    \n        if(anyData()==false) \n        {\n            const _id = Math.floor(Math.random() * 100);\n            const data = JSON.stringify([\n                { id: _id, title: \"You're up & running!\", completed: false }\n            ]);\n            localStorage.setItem('_todos', data);\n            return JSON.parse(localStorage.getItem(\"_todos\"));\n        } \n        else {\n            return JSON.parse(localStorage.getItem(\"_todos\"));\n        }\n    };\n\n    const saveData = (data) => {\n        localStorage.setItem(\"_todos\", JSON.stringify(data));\n    };\n\n    return {\n        todos: getTodos,\n        save: saveData\n    };\n}());\n\nexport default Store;\n\n","/**\n * check if field value is empty or not\n * @param {*} field \n * returns @bool true/false\n */\nconst isEmpty = (field=null) => {\n    return (field ===null || field.trim().length===0) ? true : false;\n};\n\n/**\n * checks if field has characters less or equal to 5:\n * a minimum required for any input field\n * @param {*} field \n * returns @bool true/false\n */\nconst isLessThan = (field=null) => {\n    return (field.length <= 5) ? true : false;\n};\n\nconst mergeObjs = (objArr, newObj) => {\n    let newArr = objArr.filter(obj => obj.id !== newObj[0].id);\n    return [...newArr, newObj[0]];\n};\n\nexport { isEmpty, isLessThan, mergeObjs };","import Store from './data/Store';\nimport { mergeObjs } from '../../lib/Utils'\n\n/**\n * Handles all CRUD tasks\n * Abstracts methods for child models \n * thru inheritance (all models inherit from Model class)\n */\nexport default class Model \n{\n    constructor(title)\n    {\n        this.todos = Store.todos();\n        this.title = title;\n    }\n\n    storeState() \n    {\n        this.todos.push({\n            id: Math.floor(Math.random() * 100),\n            title: this.title,\n            completed: false\n        });\n\n        Store.save(this.todos);\n    }\n\n    updateStore(_todo)\n    {\n        const newStore = mergeObjs(this.todos, _todo);\n        Store.save(newStore);\n        // let newTodos = this.todos.filter(todo => todo.id !== _todo[0].id);\n        // let newStore = [...newTodos, _todo[0]];\n        // localStorage.setItem(\"_todos\", JSON.stringify(newStore));\n    }\n\n    // returns all todos\n    all() \n    {\n        return this.todos;\n    }\n\n    get(id)\n    {\n        return this.todos.filter(item => item.id === id );\n    }\n\n    /**\n     * invokes setStore method which engages \n     * persistence storage when saving NEW todo\n     */\n    save()\n    {\n        this.storeState();\n    }\n\n    editTitle(id, newTitleText) \n    {\n        let todo = this.todos.filter(item => item.id == id );\n        todo[0].title = newTitleText;\n        this.updateStore(todo);\n    }\n\n    toggleCompleted(id)\n    {\n        let todo = this.todos.filter(item => item.id == id );\n        todo[0].completed = !todo[0].completed;\n        this.updateStore(todo);\n    }\n\n    delete(id) \n    {\n        this.todos = this.store.filter(todo => todo.id !== id );\n        return true;\n    }\n}\n\n","import Model  from './abstract/Model';\n\n/**\n * Extends model abstract\n * initializes instance properties\n */\nexport default class Todo extends Model \n{\n\tconstructor(title = null) \n\t{\n\t\tsuper(title);\n\t}\n}\n","import Todo from '../models/Todo';\nimport { isEmpty } from '../lib/Utils';\n\n/**\n * Class responsible for creating dynamic DOM elements:\n * todo list, alerts etc\n * ref: https://davidwalsh.name/documentfragment\n */\nexport default class UI \n{\n\tconstructor(todos)\n\t{\n\t\t// init todos\n\t\tUI.todos = new Todo();\n\n\t\t// get div with id 'app' from index.html\n\t\tUI.appHook = document.getElementById(\"app\");\n\t\tUI.table = document.createElement(\"table\");\n\t\tUI.table.setAttribute(\"id\", \"list-items\");\n\t}\n\n    static showTodos() \n    {\n\t\t// get todos\n\t\tconst todos = UI.todos.all();\n\n\t\t// iterate through each todo and \n\t\t//delegate DOM manipulation to showTodo()\n\t\ttodos.map(todo => UI.showTodo(todo));\n\t}\n\n\t/**\n\t * method responsible for creating new DOM nodes and \n\t * assigning todo values to list nodes.\n\t * @param {*} todo \n\t */\n    static showTodo(todo) \n    {\n\t\t// create a UL & LI elements\n\t\tconst tr = document.createElement(\"tr\");\n\t\tconst td = document.createElement(\"td\");\n\t\tconst td1 = document.createElement(\"td\");\n\t\tconst td2 = document.createElement(\"td\");\n\t\tconst input = document.createElement(\"input\"); \n\t\tconst span = document.createElement(\"span\"); \n\t\tconst btn = document.createElement(\"button\"); \n\n\t\t// set attributes to elements\n\t\tinput.setAttribute('type', 'checkbox'); \n\t\tinput.setAttribute('class', 'checkbox');\n\t\tinput.setAttribute('value', todo.id);\n\n\t\tspan.setAttribute('class', 'todo-title');\n\t\tspan.setAttribute('id', todo.id);\n\t\tspan.innerHTML = todo.title;\n\n\t\tbtn.setAttribute('id', todo.id); \n\t\tbtn.setAttribute('class', 'delete');\n\t\tbtn.innerHTML = \"X\";\n\t\t\n\t\t// append children to li tag\n\t\ttd.prepend(input);\n\t\ttd1.appendChild(span);\n\t\ttd2.appendChild(btn);\n\n\t\t// then append the li to ul tag\n\t\ttr.setAttribute('class', todo.completed);\n\t\ttr.appendChild(td);\n\t\ttr.appendChild(td1);\n\t\ttr.appendChild(td2);\n\n\t\tUI.table.appendChild(tr);\n\n\t\t// finally append the ul tag to the appHook\n\t\tUI.appHook.appendChild(UI.table);\n\t}\n\n\tstatic toggleTodo(el)\n\t{\n\t\t// select only element(s) with 'checkbos' class attrs\n\t\tif(el.classList.contains('checkbox'))\n\t\t{\n\t\t\t// update completed property\n\t\t\tUI.todos.toggleCompleted(el.value);\n\t\t\t// update the UI\n\t\t\tel.parentElement.parentElement.classList.toggle(\"true\");\n\t\t}\n\t}\n\n\tstatic editTodo(el) \n\t{\n\t\tif(el.classList.contains('todo-title'))\n\t\t{\n\t\t\t// edit todo\n\t\t\tconst newTitleText = prompt(\"Enter new todo title\");\n\n\t\t\tif(isEmpty(newTitleText) == true) \n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tUI.todos.editTitle(el.id, newTitleText);\n\t\t\tel.innerHTML = newTitleText;\n\t\t}\n\t}\n\n\tstatic removeTodo(el) \n\t{\n\t\tif(el.classList.contains('delete'))\n\t\t{\n\t\t\tel.parentElement.remove();\n\t\t}\n\t}\n\n\n\t/**\n\t * displays errors when called\n\t * @param {*} errorArray \n\t */\n\tstatic renderErrors(errorArray=[])\n\t{\n\t\t// ensure errorsAray is set\n\t\tif(errorArray.length === 0) \n\t\t{\n\t\t\t// stop script if array is empty. log message\n\t\t\treturn console.log('expect error array not to be empty');\n\t\t}\n\n\t\t// hook to alerts section in index.html\n\t\tconst alerts = document.getElementById('display-alerts');\n\t\t\n\t\t// create a ul tag\n\t\tlet ul = document.createElement(\"ul\");\n\n\t\t// loop thru errors\n\t\terrorArray.forEach(error => {\n\t\t\t// create li element each time\n\t\t\tlet li = document.createElement(\"li\");\n\n\t\t\t// add error text to li element\n\t\t\tli.innerHTML = error;\n\n\t\t\t// append it immediately to the ul tag\n\t\t\tul.appendChild(li);\n\t\t});\n\n\t\t// append the ul tag to allerts div\n\t\talerts.appendChild(ul);\n\t}\n}\n","/**\n * Error handling class\n * contains errors class property\n * and get & set class methods\n */\n\nexport default class Errors \n{\n    constructor()\n    {\n        // initialize errors property to empty array\n        Errors.errors = [];\n    } \n\n    // returns errors array\n    static get()\n    {\n        return Errors.errors;\n    }\n\n    // sets values to errors property\n    static set(errMsg=null)\n    {\n        Errors.errors.push(errMsg);\n    }\n}","import Errors from './Errors';\n\n/**\n * NOTE: class subject to extention as theres \n * a lot of methods that could potentially be added\n * eg: email, password etc\n */\n\n /**\n  * Validation class validates any form input.\n  * call validate class method and pass it rules & \n  * form data. Any errors are routed to Errors class within\n  * its methods.\n  */\nexport default class Validation \n{\n    /**\n     * cycles through inputs array and returns TRUE/FALSE\n     * depending on whether there are errors or not\n     * @param {*} rules \n     * @param {*} data \n     * returns @bool depending on whether form is valid on not\n     */\n    static validate(rules, data) \n    {\n        // set valide to true unless something is wrong within data object\n        let valid = true;\n\n        // loop through rules first\n        rules.forEach((rule, index) => {\n\n            // extract rules into callback array.\n            let callbacks = rule.title.split('|');\n\n            // loop thru rules array\n            callbacks.forEach(callback => {\n\n                /**\n                 * extract input data and set value variable\n                 * extract keys from data object and set field name\n                 * variable\n                 */\n                let value = (data[index]) ? data[index] : null;\n                let fieldName = Object.keys(data[0])[0];\n\n                // dynamically call this class methods and pass value and field name.\n                if(Validation[callback](value, fieldName) === false) \n                { \n                    /**\n                     * if false ie nthere was a problem: no input value \n                     * or value infringes some rule then set form validity to false.\n                     */\n                    valid = false;\n                }\n                \n            });\n        });\n\n        // return whether form was valid or not\n        return valid;\n    }\n\n    /**\n     * Check if input has minimum character length\n     * @param {*} value \n     * @param {*} fieldName \n     * Returns @bool true/false \n     */\n    static min(value=null, fieldName)\n    {\n        // initialize validity\n        let valid = null;\n\n        // check if input is less that a certain minimum\n        if(Validation.lessThan(value._name) === true) \n        {\n            // if so set valid to false: input has less characters ...\n            // than required\n            valid = false;\n\n            // set error message to errors class\n            Errors.set(`${fieldName} must be more than 5 characters.`);\n        }  \n        else \n        {\n            // otherwise input has right number of characters\n            // set valid to true.\n            valid = true;\n        }\n\n        // return validity\n        return valid;\n    }\n\n    /**\n     * Check input for missing value: input MUST contain value\n     * @param {*} value \n     * @param {*} fieldName \n     * returns @bool true/false\n     */\n    static required(value=null, fieldName)\n    {\n        // initialize validity\n        let valid = null;\n\n        // check if input has empty string\n        if(Validation.empty(value._name) ===true) \n        {\n            // if so set validity to false: input is empty\n            valid = false;\n            \n            // set error message to errors class\n            Errors.set(`${fieldName} is reqired`);\n        } \n        else \n        {\n            // otherwise input is valid: set validity to true\n            valid = true;\n        }\n\n        // return valid\n        return valid;\n    }\n\n    /**\n     * check if field value is empty or not\n     * @param {*} field \n     * returns @bool true/false\n     */\n    static empty(field=null)\n    {\n        return (field ===null || field.trim().length===0) ? true : false;\n    }\n\n    /**\n     * checks if field has characters less or equal to 5:\n     * a minimum required for any input field\n     * @param {*} field \n     * returns @bool true/false\n     */\n    static lessThan(field=null)\n    {\n        return (field.length <= 5) ? true : false;\n    }\n\n}","import Todo from '../models/Todo';\nimport UI from '../components/UI';\nimport Validation from '../lib/Validation';\nimport Errors from '../lib/Errors';\n\n/**\n * handle button click\n * display errors if any\n * collect form input, and delegate validation\n *  delegate todo persistence\n */\nconst todoSubmit = () => {\n\n    // query button tag\n    const btn = document.getElementById(\"btn\");\n\n    // add event to button tag\n    btn.addEventListener(\"click\", () => {\n        /** \n         * initialize variables \n         * **/\n\n        // set rules\n        const rules = [{ title: 'required|min' }];\n        // get input element\n        const _input = document.getElementById(\"new-todo\");\n        // obtain input name\n        const _name = _input.name;\n        // obtain input value\n        const newTodo = _input.value;\n\n        /** Initialize errors object **/\n        new Errors();\n\n        // validate input, passing rules and input value.\n        if(Validation.validate(rules, [{ _name: newTodo }])===true)\n        {\n            /**\n             * If Validation passes then...\n             * initialize Todo object and save new Todo\n             * clear input UI\n             */\n            const todo = new Todo(newTodo);\n            todo.save();\n            UI.showTodo(todo);\n            _input.value = \"\";\n        } else {\n            /**\n             * Otherwise render errors on UI\n             */\n            UI.renderErrors(Errors.get());\n        }\n    });\n};\n\nconst toggleCompleted = () => {\n\n    const todoList = document.querySelector('#list-items');\n\n    if(todoList)\n    {\n        // add event to it plus its children (propgation)\n        todoList.addEventListener('click', (e) => {\n            /**\n             * delegate action to UI toggle action -\n             * passing the clicked element\n             */\n            UI.toggleTodo(e.target);\n        }, false);\n    }\n};\n\nconst editTodo = () => {\n\n    const todoList = document.querySelector('#list-items');\n\n    if(todoList)\n    {\n        todoList.addEventListener('dblclick', (e) => {\n            /**\n             * delegate action to UI edit action -\n             * passing the clicked element\n             */\n            UI.editTodo(e.target);\n        }, false);\n    }\n};\n\nconst removeTodo = () => {\n\n    // selectlist item wrapper\n    const todoList = document.querySelector('#list-items');\n\n    todoList.addEventListener('click', (e) => {\n        UI.removeTodo(e.target);\n    }, false);\n};\n\n\nexport { todoSubmit, toggleCompleted, editTodo, removeTodo };","import UI from './components/UI';\nimport { todoSubmit, toggleCompleted, editTodo } from './controllers/Actions';\n\n// display todos when DOM loads\nwindow.document.addEventListener(\"DOMContentLoaded\", function() {\n\n\t// initialize UI\n\tnew UI;\n\t\n\t//display data\n\tUI.showTodos();\n\n\t// handle events\n\ttodoSubmit();\n\ttoggleCompleted();\n\teditTodo();\n});\n\n\n  "]}