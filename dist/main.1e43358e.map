{"version":3,"sources":["src/models/abstract/AbstractModel.js","src/models/Todo.js","src/components/UI.js","src/utils/Errors.js","src/utils/Validation.js","src/utils/Actions.js","src/main.js"],"names":["Model","title","data","JSON","parse","localStorage","getItem","todos","push","id","Math","floor","random","completed","setItem","stringify","storeState","console","log","store","filter","item","todo","newStore","edited","setStore","Todo","UI","state","all","map","showTodo","appHook","document","getElementById","ul","createElement","li","input","btn1","btn2","setAttribute","innerHTML","appendChild","errorArray","length","alerts","forEach","error","Errors","errors","errMsg","Validation","rules","valid","rule","index","callbacks","split","callback","value","fieldName","Object","keys","lessThan","_name","set","empty","field","trim","HandleBtnClick","btn","addEventListener","_input","name","newTodo","validate","save","renderErrors","get","window","showTodos"],"mappings":"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","file":"main.1e43358e.map","sourceRoot":"..","sourcesContent":["\nexport default class Model \n{\n    constructor(title)\n    {\n        let data = JSON.parse(localStorage.getItem(\"_todos\"));\n        this.todos =  (data) ? data : [];\n        this.title = title;\n    }\n\n    storeState() \n    {\n        this.todos.push({\n            id: Math.floor(Math.random() * 100),\n            title: this.title,\n            completed: false\n        });\n\n        localStorage.setItem(\"_todos\", JSON.stringify(this.todos));\n    }\n\n    setStore(data)\n    {\n        this.storeState(data);\n    }\n\n    all() \n    {\n        return this.todos;\n    }\n\n    get(id)\n    {\n        if(id===null) \n        {\n\t\t\treturn console.log(\"function expects exactly 1 arg. 0 passed\");\n        }\n        \n        return this.store.filter(item => item.id === id );\n    }\n\n    save()\n    {\n        this.storeState();\n        return this;\n    }\n\n    edit(id=null, title=null) \n    {\n        if(id===null || title===null) \n        {\n\t\t\treturn console.log(\"Update function expects exactly 1 arg. 0 passed\");\n        }\n        \n        let todo = this.store.filter(item => item.id === id );\n\n        if(todo) \n        {\n            todo.title = title;\n            let newStore = [...this.store, edited];\n            this.setStore(newStore);\n            return true;\n        } \n        \n        return console.log('Cannot find todo');    \n    }\n\n    delete(id) \n    {\n        if(id===null) \n        {\n            return console.log(\"Remove function expects exactly 1 arg. 0 passed\");\n        }\n\n        this.store = this.store.filter(todo => todo.id !== id );\n        return true;\n    }\n}\n","import Model  from './abstract/AbstractModel';\n\n/**\n * Extends model abstract\n * initializes instance properties\n */\nexport default class Todo extends Model \n{\n\tconstructor(title = null) \n\t{\n\t\tsuper(title);\n\t}\n}\n","import Todo from '../models/Todo';\n\n/**\n * Class responsible for creating dynamic DOM elements:\n * todo list, alerts etc\n * ref: https://davidwalsh.name/documentfragment\n */\nexport default class UI \n{\n\t// display todos from Todo model\n    static showTodos() \n    {\n\t\t// initize todos\n\t\tconst todos = new Todo();\n\t\t\n\t\t// parse json from todo model\n\t\tUI.state = todos.all();\n\n\t\t// iterate through each todo and delegate DOM manipulation to showTodo()\n\t\tUI.state.map(todo => UI.showTodo(todo));\n\t}\n\n\t/**\n\t * method responsible for creating new DOM nodes and \n\t * assigning todo values to list nodes.\n\t * @param {*} todo \n\t */\n    static showTodo(todo) \n    {\n\t\t/**\n\t\t * initialize variables:\n\t\t * hook to app id in index.html\n\t\t * create ul, li elements\n\t\t * append children to each respectively\n\t\t */\n\n\t\t // get div with id 'app' from index.html\n\t\tconst appHook = document.getElementById(\"app\");\n\t\t\n\t\t// create a UL & LI elements\n\t    const ul = document.createElement(\"ul\");\n\t\tconst li = document.createElement(\"li\");\n\t\tconst input = document.createElement(\"input\"); \n\t\tconst btn1 = document.createElement(\"button\"); \n\t\tconst btn2 = document.createElement(\"button\"); \n\n\t\t// add attributes\n\t\tinput.setAttribute('type', 'checkbox'); \n\t\tinput.setAttribute('id', 'checkbox');\n\n\t\tbtn1.setAttribute('id', todo.id); \n\t\tbtn1.setAttribute('id', 'btn1');\n\t\tbtn1.innerHTML = \"Edit\";\n\n\t\tbtn2.setAttribute('id', todo.id); \n\t\tbtn2.setAttribute('id', 'btn2');\n\t\tbtn2.innerHTML = \"Delete\";\n\t\t\n\t\t// append children to li tag\n\t\tli.innerHTML = todo.title;\n\t\tli.appendChild(input);\n\t\tli.appendChild(btn1);\n\t\tli.appendChild(btn2);\n\n\t\t// then append the li to ul tag\n\t\tul.appendChild(li);\n\n\t\t// finally append the ul tag to the appHook\n\t\tappHook.appendChild(ul);\n\t}\n\n\t/**\n\t * displays errors when called\n\t * @param {*} errorArray \n\t */\n\tstatic renderErrors(errorArray=[])\n\t{\n\t\t// ensure errorsAray is set\n\t\tif(errorArray.length === 0) \n\t\t{\n\t\t\t// stop script if array is empty. log message\n\t\t\treturn console.log('expect error array not to be empty');\n\t\t}\n\n\t\t// hook to alerts section in index.html\n\t\tconst alerts = document.getElementById('display-alerts');\n\t\t\n\t\t// create a ul tag\n\t\tlet ul = document.createElement(\"ul\");\n\n\t\t// loop thru errors\n\t\terrorArray.forEach(error => {\n\t\t\t// create li element each time\n\t\t\tlet li = document.createElement(\"li\");\n\n\t\t\t// add error text to li element\n\t\t\tli.innerHTML = error;\n\n\t\t\t// append it immediately to the ul tag\n\t\t\tul.appendChild(li);\n\t\t});\n\n\t\t// append the ul tag to allerts div\n\t\talerts.appendChild(ul);\n\t}\n}\n","/**\n * Error handling class\n * contains errors class property\n * and get & set class methods\n */\n\nexport default class Errors \n{\n    constructor()\n    {\n        // initialize errors property to empty array\n        Errors.errors = [];\n    } \n\n    // returns errors array\n    static get()\n    {\n        return Errors.errors;\n    }\n\n    // sets values to errors property\n    static set(errMsg=null)\n    {\n        Errors.errors.push(errMsg);\n    }\n}","import Errors from './Errors';\n\n/**\n * NOTE: class subject to extention as theres \n * a lot of methods that could potentially be added\n * eg: email, password etc\n */\n\n /**\n  * Validation class validates any form input.\n  * call validate class method and pass it rules & \n  * form data. Any errors are routed to Errors class within\n  * its methods.\n  */\nexport default class Validation \n{\n    /**\n     * cycles through inputs array and returns TRUE/FALSE\n     * depending on whether there are errors or not\n     * @param {*} rules \n     * @param {*} data \n     * returns @bool depending on whether form is valid on not\n     */\n    static validate(rules, data) \n    {\n        // set valide to true unless something is wrong within data object\n        let valid = true;\n\n        // loop through rules first\n        rules.forEach((rule, index) => {\n\n            // extract rules into callback array.\n            let callbacks = rule.title.split('|');\n\n            // loop thru rules array\n            callbacks.forEach(callback => {\n\n                /**\n                 * extract input data and set value variable\n                 * extract keys from data object and set field name\n                 * variable\n                 */\n                let value = (data[index]) ? data[index] : null;\n                let fieldName = Object.keys(data[0])[0];\n\n                // dynamically call this class methods and pass value and field name.\n                if(Validation[callback](value, fieldName) === false) \n                { \n                    /**\n                     * if false ie nthere was a problem: no input value \n                     * or value infringes some rule then set form validity to false.\n                     */\n                    valid = false;\n                }\n                \n            });\n        });\n\n        // return whether form was valid or not\n        return valid;\n    }\n\n    /**\n     * Check if input has minimum character length\n     * @param {*} value \n     * @param {*} fieldName \n     * Returns @bool true/false \n     */\n    static min(value=null, fieldName)\n    {\n        // initialize validity\n        let valid = null;\n\n        // check if input is less that a certain minimum\n        if(Validation.lessThan(value._name) === true) \n        {\n            // if so set valid to false: input has less characters ...\n            // than required\n            valid = false;\n\n            // set error message to errors class\n            Errors.set(`${fieldName} must be more than 5 characters.`);\n        }  \n        else \n        {\n            // otherwise input has right number of characters\n            // set valid to true.\n            valid = true;\n        }\n\n        // return validity\n        return valid;\n    }\n\n    /**\n     * Check input for missing value: input MUST contain value\n     * @param {*} value \n     * @param {*} fieldName \n     * returns @bool true/false\n     */\n    static required(value=null, fieldName)\n    {\n        // initialize validity\n        let valid = null;\n\n        // check if input has empty string\n        if(Validation.empty(value._name) ===true) \n        {\n            // if so set validity to false: input is empty\n            valid = false;\n            \n            // set error message to errors class\n            Errors.set(`${fieldName} is reqired`);\n        } \n        else \n        {\n            // otherwise input is valid: set validity to true\n            valid = true;\n        }\n\n        // return valid\n        return valid;\n    }\n\n    /**\n     * check if field value is empty or not\n     * @param {*} field \n     * returns @bool true/false\n     */\n    static empty(field=null)\n    {\n        return (field ===null || field.trim().length===0) ? true : false;\n    }\n\n    /**\n     * checks if field has characters less or equal to 5:\n     * a minimum required for any input field\n     * @param {*} field \n     * returns @bool true/false\n     */\n    static lessThan(field=null)\n    {\n        return (field.length <= 5) ? true : false;\n    }\n\n}","import Todo from '../models/Todo';\nimport UI from '../components/UI';\nimport Validation from './Validation';\nimport Errors from './Errors';\n\n/**\n * handle button click\n * display errors if any\n * collect form input, and delegate validation\n *  delegate todo persistence\n */\nconst HandleBtnClick = () => {\n\n    // query button tag\n    const btn = document.getElementById(\"btn\");\n\n    // add event to button tag\n    btn.addEventListener(\"click\", () => {\n        /** \n         * initialize variables \n         * **/\n\n        // set rules\n        const rules = [{ title: 'required|min' }];\n        // get input element\n        const _input = document.getElementById(\"new-todo\");\n        // obtain input name\n        const _name = _input.name;\n        // obtain input value\n        const newTodo = _input.value;\n\n        /** Initialize errors object **/\n        new Errors();\n\n        // validate input, passing rules and input value.\n        if(Validation.validate(rules, [{ _name: newTodo }])===true)\n        {\n            /**\n             * If Validation passes then...\n             * initialize Todo object and save new Todo\n             * clear input UI\n             */\n            const todo = new Todo(newTodo);\n            todo.save();\n            UI.showTodo(todo);\n            _input.value = \"\";\n        } else {\n            /**\n             * Otherwise render errors on UI\n             */\n            UI.renderErrors(Errors.get());\n        }\n    });\n};\n\nexport { HandleBtnClick };","import UI from './components/UI';\nimport { HandleBtnClick } from './utils/Actions';\n\n// display todos when DOM loads\nwindow.document.addEventListener(\"DOMContentLoaded\", function() {\n\t\n\t//display data\n\tUI.showTodos();\n});\n\n// handle \"add new todo\" button click\nHandleBtnClick();\n  "]}